@article{Paul,
author = {Paul, Sharoda A and Morris, Meredith Ringel},
file = {::},
isbn = {9781605582467},
title = {{CoSense : Enhancing Sensemaking for Collaborative Web Search}}
}
@article{VanderMeij2006,
author = {van der Meij, Jan and de Jong, Ton},
doi = {10.1016/j.learninstruc.2006.03.007},
file = {::},
issn = {09594752},
journal = {Learning and Instruction},
keywords = {instructional technology,multiple representations,scientific discovery learning,simulation-based learning environments},
month = jun,
number = {3},
pages = {199--212},
title = {{Supporting students' learning with multiple representations in a dynamic simulation-based learning environment}},
url = {http://linkinghub.elsevier.com/retrieve/pii/S0959475206000260},
volume = {16},
year = {2006}
}
@book{Cockburn2006,
abstract = {Agile Software Development is a highly stimulating and rich book. The author has a deep background and gives us a tour de force of the emerging agile methods. Tom Gilb The agile model of software development has taken the world by storm. Now, in Agile Software Development, Second Edition, one of agiles leading pioneers updates his Jolt Productivity award-winning book to reflect all thats been learned about agile development since its original introduction. Alistair Cockburn begins by updating his powerful model of software development as a cooperative game of invention and communication. Among the new ideas he introduces: harnessing competition without damaging collaboration; learning lessons from lean manufacturing; and balancing strategies for communication. Cockburn also explains how the cooperative game is played in business and on engineering projects, not just software development Next, he systematically illuminates the agile model, shows how it has evolved, and answers the questions developers and project managers ask most often, including Where does agile development fit in our organization? How do we blend agile ideas with other ideas? How do we extend agile ideas more broadly? Cockburn takes on crucial misconceptions that cause agile projects to fail. For example, youll learn why encoding project management strategies into fixed processes can lead to ineffective strategy decisions and costly mistakes. Youll also find a thoughtful discussion of the controversial relationship between agile methods and user experience design. Cockburn turns to the practical challenges of constructing agile methodologies for your own teams. Youll learn how to tune and continuously reinvent your methodologies, and how to manage incomplete communication. This edition contains important new contributions on these and other topics: Agile and CMMI Introducing agile from the top down Revisiting custom contracts Creating change with stickers In addition, Cockburn updates his discussion of the Crystal methodologies, which utilize his cooperative game as their central metaphor. If youre new to agile development, this book will help you succeed the first time out. If youve used agile methods before, Cockburns techniques will make you even more effective.},
author = {Cockburn, Alistair},
booktitle = {Building},
isbn = {0321482751},
pages = {2000 -- 2001},
publisher = {Addison-Wesley Professional},
title = {{Agile Software Development: The Cooperative Game}},
url = {http://www.amazon.co.uk/Agile-Software-Development-Cooperative-Game/dp/0321482751},
volume = {113},
year = {2006}
}

@article{Seale2000,
abstract = {This paper presents case studies that describe the experiences of the two authors in trying to use learning technologies to facilitate reflective thinking in their students. At the University of Leicester, a Web-based biology tutorial called How Now Mad Cow, which covers the topics of bovine spongiform encephalopathy and a new variant CreutzfeldtJakob disease (nvCJD). At the University of Southampton, a web-based hyper-mail discussion list to support teaching on a first year psychosocial science module for occupational therapy and physiotherapy students has been established. In both examples, the tutors had attempted to create a learning environment that would engage students in the learning experience and facilitate reflection by helping them to create meaning from the learning experience and see things in a different way. The evaluation data from both case studies provides some evidence that the learning technologies helped to facilitate reflection for some students. However, the evidence for reflection is not overwhelming and the data provides some evidence that four key factors may have influenced how successful the use of learning technologies were in facilitating reflection. These factors are the way the learning technology is used, the nature of the student groups, the role of the tutor and student preferences for off-line reflection. These are discussed and ways forward are identified.},
author = {Seale, Jane K and Cann, Alan J},
file = {:C$\backslash$:/Users/even/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Seale, Cann - 2000 - Reflection on-line or off-line the role of learning technologies in encouraging students to reflect.pdf:pdf},
journal = {Computers \& Education},
keywords = {lb2300 higher education,qa75 electronic computers. computer science},
number = {3-4},
pages = {309--320},
publisher = {Elsevier},
title = {{Reflection on-line or off-line: the role of learning technologies in encouraging students to reflect}},
url = {http://dx.doi.org/10.1016/S0360-1315(99)00052-4},
volume = {34},
year = {2000}
}


@misc{git,
author = {Git},
title = {Git -- Everything is local. Distributed version control system},
year = {2013},
howpublished = "\url{http://www.git-scm.com}",
url = {http://www.git-scm.com},
note = [Online; accessed february 2013]
}

@misc{buildingbootstrap,
author = {Mark Otto},
title = {Building Twitter Bootstrap},
year = {2013},
howpublished = "\url{http://alistapart.com/article/building-twitter-bootstrap}",
url = {http://alistapart.com/article/building-twitter-bootstrap},
note = [Online; accessed february 2013]
}

@misc{nasa,
author = {National Aeronautics and Space Administration - NASA},
title = {nasa.gov Homepage},
year = {2013},
howpublished = "\url{http://www.nasa.gov/}",
url = {http://www.nasa.gov/},
note = [Online; accessed february 2013]
}

@misc{responsivearticle,
author = {Ethan Marcotte},
title = {Responsive Web Design},
year = {2013},
howpublished = "\url{http://alistapart.com/article/responsive-web-design}",
url = {http://alistapart.com/article/responsive-web-design},
note = [Online; accessed march 2013]
}

@misc{fluidarticle,
author = {Ethan Marcotte},
title = {Fluid Grids},
year = {2013},
howpublished = "\url{http://alistapart.com/article/fluidgrids}",
url = {http://alistapart.com/article/fluidgrids},
note = [Online; accessed march 2013]
}

@misc{fluidimages,
author = {Ethan Marcotte},
title = {Fluid Images},
year = {2013},
howpublished = "\url{http://alistapart.com/article/fluid-images}",
url = {http://alistapart.com/article/fluid-images},
note = [Online; accessed march 2013]
}

@misc{fluidgrid,
author = {Rakhitha Nimesh},
title = {How Fluid Grids Work in Responsive Web Design},
year = {2013},
howpublished = "\url{http://www.1stwebdesigner.com/tutorials/fluid-grids-in-responsive-design/}",
url = {http://www.1stwebdesigner.com/tutorials/fluid-grids-in-responsive-design/},
note = [Online; accessed march 2013]
}

@misc{github,
author = {GitHub},
title = {GitHub - web-based hosting service for projects that use the Git revision control system},
year = {2013},
howpublished = "\url{http://www.github.com}",
url = {http://www.github.com},
note = [Online; accessed february 2013]
}

@misc{githubapi,
author = {GitHub API v3},
title = {GitHub API Version 3},
year = {2013},
howpublished = "\url{http://developer.github.com/v3}",
url = {http://developer.github.com/v3},
note = [Online; accessed february 2013]
}

@misc{twitterbootstrap,
author = {Twitter},
title = {Twitter Bootstrap},
year = {2013},
howpublished = "\url{http://twitter.github.com/bootstrap/index.html}",
url = {http://twitter.github.com/bootstrap/index.html},
note = [Online; accessed october 2012]
}

@misc{jgit,
author = {JGit},
title = {GitHub API Version 3},
year = {2013},
howpublished = "\url{http://www.eclipse.org/jgit/}",
url = {http://www.eclipse.org/jgit/},
note = [Online; accessed february 2013]
}

@misc{githubnumbers,
author = {GitHub},
title = {GitHub 3 million users and 5 million repositories},
year = {2013},
howpublished = "\url{https://github.com/blog/1382-three-million-users}",
url = {https://github.com/blog/1382-three-million-users},
note = [Online; accessed february 2013]
}


@article{Krogstie2011,
author = {Krogstie, Birgit R and Prilla, Michael},
file = {::},
pages = {57--71},
title = {{Tool support for reflection in the workplace in the context of reflective learning cycles Background : Computer supported reflective learning}},
year = {2011},
url = {http://ceur-ws.org/Vol-931/paper5.pdf}
}

@misc{Beck2001,
abstract = {We are uncovering better ways of developing software by doing it and helping others do it. Through this work we have come to value: Individuals and interactions over processes and tools Working software over comprehensive documentation Customer collaboration over contract negotiation Responding to change over following a plan That is, while there is value in the items on the right, we value the items on the left more.},
author = {Beck, Kent and Beedle, Mike and Bennekum, Arie Van and Cockburn, Alistair and Cunningham, Ward and Fowler, Martin and Grenning, James and Highsmith, Jim and Hunt, Andrew and Jeffries, Ron and Kern, Jon and Marick, Brian and Martin, Robert C and Mellor, Steve and Schwaber, Ken and Sutherland, Jeff and Thomas, Dave},
booktitle = {Agile Alliance},
pages = {1--2},
title = {{Principles behind the Agile Manifesto}},
url = {http://agilemanifesto.org/principles.html},
year = {2001}
}
@article{Hassan-montero2006,
author = {Hassan-montero, Yusef and Herrero-solana, V\'{\i}ctor},
file = {::},
keywords = {folksonomies,information retrieval,social indexing,tagging,visual interfaces},
title = {{Improving Tag-Clouds as Visual Information Retrieval Interfaces}},
year = {2006}
}
@article{Rivera-pelayo2011,
author = {Rivera-pelayo, Veronica and Muller, Lars},
file = {::},
isbn = {9781936968367},
pages = {268--277},
title = {{Supporting Mood Awareness in Collaborative Settings}},
year = {2011}
}
@article{Boron2011,
author = {Boron, Alessandro and Mora, Simone},
file = {::},
isbn = {9781450305419},
pages = {1--4},
title = {{Mobile augmented reality for supporting reflection}},
year = {2011}
}
@article{Lin1999,
author = {Lin, Xiaodong and Hmelo, Cindy and Kinzer, Charles K. and Secules, Teresa J.},
doi = {10.1007/BF02299633},
file = {:Users/ekun/Dropbox/MASTER-ish/Artikler/lin-designing tech.pdf:pdf},
issn = {1042-1629},
journal = {Educational Technology Research and Development},
month = sep,
number = {3},
pages = {43--62},
title = {{Designing technology to support reflection}},
url = {http://www.springerlink.com/index/10.1007/BF02299633},
volume = {47},
year = {1999}
}
@misc{Stevens2008,
author = {Stevens, Peter},
booktitle = {agilesoftwaredevelopment.com},
keywords = {retrospective,transformation},
mendeley-tags = {retrospective,transformation},
title = {{Start with Trust, Start with a Retrospective}},
url = {http://agilesoftwaredevelopment.com/blog/peterstev/start-trust-start-retrospective},
urldate = {13. november 2012},
year = {2008}
}

@article{Talby2006,
author = {Talby, David and Hazzan, Orit and Dubinsky, Yael and Keren, Arie and Force, Air},
file = {:C$\backslash$:/Users/even/Dropbox/MASTER-ish/Readingmaterial/reflections\_on\_reflection\_in\_agile\_software\_development.pdf:pdf},
title = {{Reflections on Reflection in Agile Software Development}},
year = {2006}
}
@article{Shrivastava2010,
abstract = {Distribution of software development is becoming more and more common in order to save the production cost and reduce the time to market. Large geographical distance, different time zones and cultural differences in distributed software development (DSD) leads to weak communication which adversely affects the project. Using agile practices for distributed development is also gaining momentum in various organizations to increase the quality and performance of the project. This paper explores the intersection of these two significant trends for software development i.e. DSD and agile. We discuss the challenges faced by geographically distributed agile teams and proven practices to address these issues, which will help in building a successful distributed team.},
author = {Shrivastava, Suprika Vasudeva and Date, Hema},
file = {::},
journal = {Journal of Computer Science},
number = {1},
pages = {10--17},
publisher = {Dorset House Publishing},
title = {{Distributed Agile Software Development: A Review}},
url = {http://arxiv.org/abs/1006.1955},
volume = {1},
year = {2010}
}
@article{Esearch2004,
author = {Esearch, S Ystems R and Hevner, By Alan R and March, Salvatore T and Park, Jinsoo and Ram, Sudha},
file = {:Users/ekun/Dropbox/MASTER-ish/Artikler/Design Science in Information Systems Research.pdf:pdf},
keywords = {busi-,design artifact,design science,information systems research meth-,odologies},
number = {1},
pages = {75--105},
title = {{Design Science in Information Systems Research}},
volume = {28},
year = {2004}
}
@misc{Assurance2011,
abstract = {Agile development approaches were developed because people were looking for a way to rapidly produce cost effective, working software that could be used in a matter of weeks rather than months. There are now many flavours of high-speed, low documentation software delivery approaches that are called Agile. However, many organisations already have significant investment in other methods that are mature, reliable, trusted and cost effective. Many attempts at Agile implementation fail to recognise that there is anything else present in the landscape, and that leads to dysfunctional and non-productive programmes.},
author = {Assurance, Agile},
booktitle = {Time},
pages = {4},
title = {{Getting the best results from Agile development}},
year = {2011}
}

@book{Beck1999,
abstract = {Kent Beck's eXtreme Programming eXplained provides an intriguing high-level overview of the author's Extreme Programming (XP) software development methodology. Written for IS managers, project leaders, or programmers, this guide provides a glimpse at the principles behind XP and its potential advantages for small- to mid-size software development teams. The book intends to describe what XP is, its guiding principles, and how it works. Simply written, the book avoids case studies and concrete details in demonstrating the efficacy of XP. Instead, it demonstrates how XP relies on simplicity, unit testing, programming in pairs, communal ownership of code, and customer input on software to motivate code improvement during the development process. As the author notes, these principles are not new, but when they're combined their synergy fosters a new and arguably better way to build and maintain software. Throughout the book, the author presents and explains these principles, such as "rapid feedback" and "play to win," which form the basis of XP. Generally speaking, XP changes the way programmers work. The book is good at delineating new roles for programmers and managers who Beck calls "coaches." The most striking characteristic of XP is that programmers work in pairs, and that testing is an intrinsic part of the coding process. In a later section, the author even shows where XP works and where it doesn't and offers suggestions for migrating teams and organizations over to the XP process. In the afterword, the author recounts the experiences that led him to develop and refine XP, an insightful section that should inspire any organization to adopt XP. This book serves as a useful introduction to the philosophy and practice of XP for the manager or programmer who wants a potentially better way to build software. -Richard Dragan Topics covered: Extreme Programming (XP) software methodology, principles, XP team roles, facilities design, testing, refactoring, the XP software lifecycle, and adopting XP. Software development projects can be fun, productive, and even daring. Yet they can consistently deliver value to a business and remain under control. Extreme Programming (XP) was conceived and developed to address the specific needs of software development conducted by small teams in the face of vague and changing requirements. This new lightweight methodology challenges many conventional tenets, including the long-held assumption that the cost of changing a piece of software necessarily rises dramatically over the course of time. XP recognizes that projects have to work to achieve this reduction in cost and exploit the savings once they have been earned. Fundamentals of XP include: Distinguishing between the decisions to be made by business interests and those to be made by project stakeholders. Writing unit tests before programming and keeping all of the tests running at all times. Integrating and testing the whole system-several times a day. Producing all software in pairs, two programmers at one screen. Starting projects with a simple design that constantly evolves to add needed flexibility and remove unneeded complexity. Putting a minimal system into production quickly and growing it in whatever directions prove most valuable. Why is XP so controversial? Some sacred cows don't make the cut in XP: Don't force team members to specialize and become analysts, architects, programmers, testers, and integrators-every XP programmer participates in all of these critical activities every day. Don't conduct complete up-front analysis and design-an XP project starts with a quick analysis of the entire system, and XP programmers continue to make analysis and design decisions throughout development. Develop infrastructure and frameworks as you develop your application, not up-front-delivering business value is the heartbeat that drives XP projects. Don't write and maintain implementation documentation-communication in XP projects occurs face-to-face, or through efficient tests and carefully written code. You may love XP or you may hate it, but Extreme Programming Explained will force you to take a fresh look at how you develop software.},
author = {Beck, Kent},
booktitle = {XP Series},
isbn = {0201616416},
issn = {20161641},
pages = {224},
publisher = {Addison-Wesley},
series = {The XP Series},
title = {{Extreme Programming Explained: Embrace Change}},
url = {http://www.amazon.com/dp/0201616416},
year = {1999}
}

@book{Derby2006,
abstract = {Project retrospectives help teams examine what went right and what went wrong on a project. But traditionally, retrospectives (also known as "post-mortems") are only help at the end of the project - too late to help. You need agile retrospectives that are iterative and incremental. You need to accurately find and fix problems to help the team today. Now Esther and Diana show you the tools, tricks and tips you need to fix the problems you face on a software development project on an on-going basis. You'll see how to architect retrospectives in general, how to design them specifically for your team and organization, how to run them effectively, how to make the needed changes and how to scale these techniques up. You'll learn how to deal with problems, and implement solutions effectively throughout the project - not just at the end. With regular tune-ups, your team will hum like a precise, world-class orchestra.},
author = {Derby, Esther and Larsen, Diana},
booktitle = {agilegamedevelopmentcom},
isbn = {9780977616640},
number = {2006},
pages = {170},
publisher = {Pragmatic Bookshelf},
title = {{Agile Retrospectives: Making Good Teams Great}},
url = {http://agile2007.agilealliance.org/downloads/handouts/Larsen\_448.pdf},
volume = {1},
year = {2006}
}

@misc{Maham2008,
abstract = {One of the fundamental principles in agile methods is to have feedback loops so that the team and organization can be learning and improving their approach to accomplishing goals. As a Scrum Master, the author found lots of resources on short feedback loops from pairing, automated tests and builds and iteration retrospectives. For a higher level retrospective, one spanning an entire release, he put together an agenda from scratch. This report captures how the author put together and conducted the retrospective and lessons learned from that process.},
author = {Maham, M},
booktitle = {Agile 2008 Conference},
doi = {10.1109/Agile.2008.60},
isbn = {9780769533216},
keywords = {agile,release,retrospective},
pages = {176--180},
publisher = {Ieee},
title = {{Planning and Facilitating Release Retrospectives}},
url = {http://portal.acm.org/citation.cfm?id=1443221.1443490},
year = {2008}
}

@misc{Drury2011,
abstract = {The process and effectiveness of decision making in agile development is critical yet poorly understood. This research examines decisions made across the four stages of the sprint cycle: Sprint Planning, Sprint Execution, Sprint Review and Sprint Retrospective. A focus group was conducted with 43 agile developers and managers to determine what decisions were made at different points of the sprint cycle. The results indicate that Sprint Planning includes decisions about planning the work for the subsequent sprint, Sprint Execution includes tactical implementation and development decisions, Sprint Review includes decisions about whether the product satisfies the customer and whether future sprints should continue, and Sprint Retrospective includes decisions for improving the sprint process in future sprints. Additionally, six key obstacles to decision making were identified. This research contributes to the literature on agile software development by advancing our understanding of how these teams function by analyzing the decisions made during different points of the sprint cycle and the obstacles to these decisions.},
author = {Drury, Meghann and Conboy, Kieran and Power, Ken},
booktitle = {2011 AGILE Conference},
doi = {10.1109/AGILE.2011.27},
isbn = {9780769543703},
keywords = {decision making,decision obstacles,retrospective,sprint decisions,sprint planning},
pages = {39--47},
publisher = {IEEE},
title = {{Decision Making in Agile Development: A Focus Group Study of Decisions and Obstacles}},
url = {http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=6005504},
year = {2011}
}

@misc{,
file = {::},
title = {{The MIRROR AppSphere: the case of crisis management}}
}
@article{Timeline2009,
author = {Timeline},
file = {::},
keywords = {cooperation,mobile learning,reflection,timeline},
number = {Sch\"{o}n 1983},
title = {{MOBILE AND COLLABORATIVE TIMELINES FOR}},
year = {2009}
}
@article{Calori,
author = {Calori, Ilaria Canova and Rossitto, Chiara and Divitini, Monica},
file = {::},
title = {{Understanding Trajectories of Experience in Situated Learning Field Trips}}
}
@misc{Stevens2008a,
author = {Stevens, Peter},
booktitle = {agilesoftwaredevelopment.com},
keywords = {Retrospective,scrum},
mendeley-tags = {Retrospective,scrum},
title = {{No time for reflection? Try a 5 minute retrospective}},
url = {http://agilesoftwaredevelopment.com/blog/peterstev/no-time-reflection-try-5-minute-retrospective},
urldate = {13. november 2012},
year = {2008}
}
@book{Chaiklin1993,
abstract = {Understanding Practice brings together many different perspectives that have been applied to examining social context. From Ole Dreier's work on the therapeutic relationship, to Hugh Mehan's work on learning disabled students, to Charles and Janet Keller's work on blacksmithing, the chapters form a diverse and fascinating look at situated learning. A distinctive feature of the book is the wide range of theoretical and methodological approaches to the problem of understanding cognition in everyday settings.},
annote = {Brukt i abstract},
author = {Chaiklin, Seth and Lave, Jean},
booktitle = {Learning in doing Social cognitive and computational perspectives},
chapter = {2},
editor = {Chaiklin, Seth and Lave, Jean},
pages = {414},
publisher = {Cambridge University Press},
series = {Learning in doing},
title = {{Understanding practice: Perspectives on activity and context.}},
url = {http://opus.bath.ac.uk/15127/},
volume = {0},
year = {1993}
}
@misc{Appelo2008,
author = {Appelo, Jurgen},
keywords = {automation,evaluations,retrospective},
title = {{Lesson Learned: Automate Project Evaluations}},
url = {http://agilesoftwaredevelopment.com/blog/jurgenappelo/lesson-learned-automate-projec},
urldate = {13. november 2012},
year = {2008}
}
@book{boudreflection1985,
author = {Boud, David and Keogh, Rosemary and Walker, David},
isbn = {978-0850388640},
keywords = {experience,learning,reflection},
pages = {180},
publisher = {Routledge},
title = {{Reflection: Turning Experience into Learning}},
year = {1985}
}
@article{Hearst2008,
author = {Hearst, Marti a. and Rosner, Daniela},
doi = {10.1109/HICSS.2008.422},
file = {::},
isbn = {0-7695-3075-8},
issn = {1530-1605},
journal = {Proceedings of the 41st Annual Hawaii International Conference on System Sciences (HICSS 2008)},
keywords = {Tag Clouds: Data Analysis Tool or Social Signaller},
month = jan,
pages = {160--160},
publisher = {Ieee},
title = {{Tag Clouds: Data Analysis Tool or Social Signaller?}},
url = {http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=4438863},
year = {2008}
}
@misc{Divitini,
author = {Divitini, Monica},
file = {::},
title = {{The Functions of Sharing Experiences, Observations and Insights for Reflective Learning at Work}}
}
@article{Ainsworth1999,
author = {Ainsworth, Shaaron},
doi = {10.1016/S0360-1315(99)00029-9},
file = {::},
issn = {03601315},
journal = {Computers \& Education},
month = sep,
number = {2-3},
pages = {131--152},
title = {{The functions of multiple representations}},
url = {http://linkinghub.elsevier.com/retrieve/pii/S0360131599000299},
volume = {33},
year = {1999}
}
@misc{Divitini2011,
author = {Divitini, Monica},
file = {::},
title = {{Understanding Trajectories of Experience in Situated Learning Field Trips}},
year = {2011}
}
@article{Kristiansen2011,
author = {Kristiansen, Anders Klund and Storlien, Andreas},
file = {::},
number = {June},
title = {{Enhancing reflection by collaboratively capturing experiences in a timeline}},
year = {2011}
}
@book{Schon1983,
abstract = {A leading M.I.T. social scientist and consultant examines five professionsengineering, architecture, management, psychotherapy, and town planningto show how professionals really go about solving problems.The best professionals, Donald Sch\"{o}n maintains, know more than they can put into words. To meet the challenges of their work, they rely less on formulas learned in graduate school than on the kind of improvisation learned in practice. This unarticulated, largely unexamined process is the subject of Sch\"{o}ns provocatively original book, an effort to show precisely how reflection-in-action works and how this vital creativity might be fostered in future professionals.},
author = {Sch\"{o}n, Donald A},
booktitle = {Reading},
chapter = {374},
doi = {10.1542/peds.2005-0209},
editor = {Smith, Temple},
isbn = {0465068782},
issn = {46506878},
number = {3},
pages = {374},
pmid = {16322184},
publisher = {Basic Books},
title = {{The Reflective Practitioner: How Professionals Think in Action}},
url = {http://www.amazon.com/Reflective-Practitioner-Professionals-Think-Action/dp/0465068782},
volume = {1?},
year = {1983}
}
@article{Krogstie2009,
author = {Krogstie, Birgit R. and Divitini, Monica},
doi = {10.1109/CSEET.2009.20},
file = {::},
isbn = {978-1-4244-3431-2},
journal = {2009 22nd Conference on Software Engineering Education and Training},
pages = {85--92},
publisher = {Ieee},
title = {{Shared Timeline and Individual Experience: Supporting Retrospective Reflection in Student Software Engineering Teams}},
url = {http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=4812679},
year = {2009}
}
@inproceedings{Lamoreux2005,
abstract = {Many Agile proponents encourage reflection as part of the feedback/learning cycle. When we began using Agile practices, including reflection, I discovered that our organizations norms and beliefs tended to discount the value of regular reflection meetings. Many engineers wanted to avoid anything that might be seen as touchy- feely. Our initial attempts at holding regular reflection meetings for agile teams had mixed results. Some reflections turned into gripe sessions where a lot of venting occurred but nothing changed. Other reflections were short and a little too sweet team members said little and no learning occurred. This paper describes some of our efforts helping teams improve their reflection meetings and relates some of the positive results in my organization as a result of regular reflection. It also discusses techniques for overcoming initial reluctance to take time out to reflect, keeping reflection meetings interesting, and taking reflection to a deeper level.},
author = {Lamoreux, M},
booktitle = {Agile Development Conference ADC05},
doi = {10.1109/ADC.2005.29},
isbn = {0769524877},
pages = {139--144},
publisher = {IEEE Comput. Soc},
title = {{Improving agile team learning by improving team reflections [agile software development]}},
url = {http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=1609813},
year = {2005}
}
@article{Bjarnason2012,
author = {Bjarnason, Elizabeth and Regnell, Bj\"{o}rn},
file = {:Users/ekun/Dropbox/MASTER-ish/Readingmaterial/Bjarnason\_Regnell\_2012\_Evidence based timelines for agile project retrospsectives.pdf:pdf},
keywords = {agile,retrospective,software process,software visualization},
pages = {177--184},
title = {{Evidence-Based Timelines for Agile Project Retrospectives – A Method Proposal}},
year = {2012}
}
